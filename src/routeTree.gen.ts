/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CoursesImport } from './routes/courses'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as CoursesCourseIdImport } from './routes/courses.$courseId'

// Create/Update Routes

const CoursesRoute = CoursesImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CoursesCourseIdRoute = CoursesCourseIdImport.update({
  id: '/$courseId',
  path: '/$courseId',
  getParentRoute: () => CoursesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/courses': {
      id: '/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesImport
      parentRoute: typeof rootRoute
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdImport
      parentRoute: typeof CoursesImport
    }
  }
}

// Create and export the route tree

interface CoursesRouteChildren {
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
}

const CoursesRouteChildren: CoursesRouteChildren = {
  CoursesCourseIdRoute: CoursesCourseIdRoute,
}

const CoursesRouteWithChildren =
  CoursesRoute._addFileChildren(CoursesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/courses': typeof CoursesRouteWithChildren
  '/courses/$courseId': typeof CoursesCourseIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/courses' | '/courses/$courseId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/courses' | '/courses/$courseId'
  id: '__root__' | '/' | '/about' | '/courses' | '/courses/$courseId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CoursesRoute: typeof CoursesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CoursesRoute: CoursesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/courses"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/courses": {
      "filePath": "courses.tsx",
      "children": [
        "/courses/$courseId"
      ]
    },
    "/courses/$courseId": {
      "filePath": "courses.$courseId.tsx",
      "parent": "/courses"
    }
  }
}
ROUTE_MANIFEST_END */
